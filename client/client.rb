class Client
  include Path
  include Contraindications
  include Registration

  OPTIONS = %w[
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\ –∏\ –∑–∞–ø–∏—Å—å –ú–æ–∏\ –∑–∞–ø–∏—Å–∏
    –°—Ç–æ–∏–º–æ—Å—Ç—å\ –∏\ –≤—Ä–µ–º—è –°—Ö–µ–º–∞\ –ø—Ä–æ–µ–∑–¥–∞
    –û—Ç–º–µ–Ω–∏—Ç—å\ –∑–∞–ø–∏—Å—å –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π\ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è
  ]

  def initialize(bot:, message:)
    @bot = bot
    @message = message
    @chat_id = message.from.id
    @info = info
  end

  def perform
    return unless @message.is_a? Telegram::Bot::Types::Message

    case @message.text
    when /–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ /
      russian_date = @message.text.sub('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ', '')
      slot = MongoClient.find_slot_by_russian_date(russian_date)
      return no_slot unless slot

      if slot['state'] == 'reserved'
        send_message(chat_id: @chat_id, text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç :(')
      else
        user = MongoClient.user_info(@chat_id)
        unix_timestamp = MongoClient.reserve_via_date_time(
          date: slot['date'],
          time: slot['time'],
          link: "<a href=\"tg://user?id=#{user['id']}\">#{user['name']}</a>",
          username: @message.from.username,
          id: @chat_id
        )
        result = GoogleCalendar.add_event_to_calendar(unix_timestamp, "–ú–∞—Å—Å–∞–∂ #{user['name']}", "t.me/#{user['username']}")
        MongoClient.add_calendar_event_id({ unix_timestamp: unix_timestamp }, result.id)
        send_message(chat_id: @chat_id, text: '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å, @alicekoala –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –≤–∞—Å –Ω–∞ –º–∞—Å—Å–∞–∂. –ó–∞ –¥–µ–Ω—å –¥–æ –º–∞—Å—Å–∞–∂–∞ –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ –Ω–µ–º')
        send_message(chat_id: MASTER_ID, text: "<a href=\"tg://user?id=#{user['id']}\">#{user['name']}</a> –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–∞—Å—Å–∞–∂ #{russian_date}", parse_mode: 'HTML')
      end
      show_options
    when '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å'
      slots = MongoClient.active_slots
      if slots != []
        kb = slots.map { |s| [Telegram::Bot::Types::KeyboardButton.new(text: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ #{s['russian_datetime']}")] }
        kb << [Telegram::Bot::Types::KeyboardButton.new(text: '–ù–∞–∑–∞–¥')]
        markup = Telegram::Bot::Types::ReplyKeyboardMarkup.new(keyboard: kb, one_time_keyboard: true)
        send_message(chat_id: @chat_id, text: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏. –ù–∞ —Å–ª–æ—Ç—ã –¥–æ 16-00 –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ –≤ 10%', reply_markup: markup)
      else
        send_message_and_options('–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç :(')
      end
    when '–°—Ö–µ–º–∞ –ø—Ä–æ–µ–∑–¥–∞'
      send_path
      show_options
    when '–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è'
      send_contraindications
      show_options
    when '–ú–æ–∏ –∑–∞–ø–∏—Å–∏'
      show_my_appointments
      show_options
    when '–ù–∞–∑–∞–¥'
      show_options
    when '–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è'
      send_message_and_options(about_cost_and_time)
    when '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'
      send_message_and_options('–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–∞—Å—Ç–µ—Ä—É @alicekoala')
    when '–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'
      send_message_and_options(about_sertificate)
    when '/start'
      greetings
    else
      if not_registred?
        MongoClient.add_user(id: @chat_id, name: @message.text.strip, username: @message.from.username)
        send_message(chat_id: @chat_id, text: "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, #{@message.text.strip}")
      else
        send_message(chat_id: @chat_id, text: '–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ')
      end
      show_options
    end
  end

  private

  def about_sertificate
    [
      "–ù–∞ –º–∞—Å—Å–∞–∂ –º–æ–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–π—Ç–∏, –Ω–æ –∏ –ø–æ–¥–∞—Ä–∏—Ç—å –µ–≥–æ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.",
      "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∞—Ä–∏–≤–∞–µ–º–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.",
      "",
      "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî 12 –º–µ—Å—è—Ü–µ–≤ –≤ —Å –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏.",
      "–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –µ–≥–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ @alicekoala üê®"
    ].join("\n")
  end

  def about_cost_and_time
    ["<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>", about_cost, "", "<b>–í—Ä–µ–º—è</b>", about_time].join("\n")
  end

  def about_cost
    text = [
      "3000—Ä –∑–∞ —á–∞—Å –º–∞—Å—Å–∞–∂–∞, 90 –º–∏–Ω—É—Ç –∏ 120 –º–∏–Ω—É—Ç —Å—Ç–æ—è—Ç 4500 —Ä—É–±–ª–µ–π –∏ 6000 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ\n",
      "–í —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ –ø—Ä–∏–π—Ç–∏, —Ä–∞–∑–¥–µ—Ç—å—Å—è, –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ –∏ –≤—ã–ø–∏—Ç—å —á–∞—é.",
      "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –º–∞—Å—Å–∞–∂ –≤—Å–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –¥–ª–∏—Ç—Å—è –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞, –∏–º–µ–Ω–Ω–æ –µ–≥–æ —è —Å–æ–≤–µ—Ç—É—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞.\n",
      "–°–µ–π—á–∞—Å –Ω–∞ –¥–Ω–µ–≤–Ω—ã–µ —Å–µ–∞–Ω—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –¥–æ 16:00 –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 10%, —á–∞—Å –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 2700—Ä, –ø–æ–ª—Ç–æ—Ä–∞ ‚Äî 4000."
    ].join("\n")
  end

  def about_time
    text = [
      "–ú–æ–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –Ω–∞ 5-7 –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ, —Å–∏–ª—å–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ –Ω–µ –Ω—É–∂–Ω–æ.\n",
      "–ö –≤—Ä–µ–º–µ–Ω–∏ —Å–∞–º–æ–≥–æ –º–∞—Å—Å–∞–∂–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å 30 –º–∏–Ω—É—Ç, —Ç–æ –µ—Å—Ç—å –µ—Å–ª–∏ –≤—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —á–∞—Å–æ–≤–æ–π –º–∞—Å—Å–∞–∂, –≤–µ—Å—å –≤–∏–∑–∏—Ç –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ –ø–æ–ª—É—Ç–æ—Ä–∞ —á–∞—Å–æ–≤\n",
      "–ï—Å–ª–∏ –≤—ã –æ–ø–∞–∑–¥—ã–≤–∞–µ—Ç–µ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç ‚Äî —Å–µ–∞–Ω—Å –±—É–¥–µ—Ç –∫–æ—Ä–æ—á–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥—Ä—É–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã"
    ].join("\n")
  end

  def send_message_and_options(text)
    send_message(chat_id: @chat_id, text: text, parse_mode: 'HTML')
    show_options
  end

  def no_slot
    send_message(chat_id: @chat_id, text: '–î–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω, –∏–∑–≤–∏–Ω–∏—Ç–µ')
    show_options
  end

  def send_message(**data)
    begin
      @bot.api.send_message(**data)
    rescue => e
      MyLogger.new('messages_log.txt').log_error(e)
    end
  end

  def show_options
    kb = OPTIONS.map { |o| Telegram::Bot::Types::KeyboardButton.new(text: o) }
    markup = Telegram::Bot::Types::ReplyKeyboardMarkup.new(keyboard: kb.each_slice(2).to_a, one_time_keyboard: true)
    send_message(chat_id: @chat_id, text: '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup: markup)
  end

  def show_my_appointments
    appointments = MongoClient.show_users_appointments(@chat_id)
    if appointments != []
      text = appointments.map do |s|
        "#{s['russian_datetime']}"
      end.join("\n")
    else
      text = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π :('
    end
    @bot.api.send_message(chat_id: @chat_id, text: text)
  end
end
